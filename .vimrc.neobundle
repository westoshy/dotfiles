if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#begin(expand('~/.vim/bundle'))

  NeoBundle 'Shougo/neobundle.vim'
  NeoBundle 'Shougo/vimproc', {
        \ 'build': {
        \ 'windows' : 'echo "Sorry, cannot update"',
        \ 'cygwin'  : 'make -f make_cygwin.mak',
        \ 'mac'     : 'make -f make_mac.make',
        \ 'unix'    : 'make -f make_unix.make',
        \ },
        \}
  NeoBundle 'Shougo/unite.vim'
  NeoBundle 'scrooloose/nerdtree'
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
  NeoBundle 'tomtom/tcomment_vim'


  NeoBundle 'SingleCompile'
  NeoBundle 't9md/vim-quickhl'
  NeoBundle 'jceb/vim-hier'
  NeoBundle 'thinca/vim-quickrun'
 
  NeoBundle 'Shougo/neocomplete'
  NeoBundleFetch 'Shougo/neocomplcache.vim'
  NeoBundle 'Shougo/neosnippet'
  NeoBundle 'Shougo/neosnippet-snippets'
  NeoBundle 'honza/vim-snippets'
  NeoBundle 'rcmdnk/vim-octopress-snippets'

  NeoBundle 'osyo-manga/vim-marching'
  NeoBundle 'osyo-manga/vim-watchdogs'
  NeoBundle 'osyo-manga/shabadou.vim'
  NeoBundle 'vim-jp/cpp-vim'
  NeoBundle 'davidhalter/jedi-vim'


  NeoBundleLazy 'marcus/rsense', {
        \ 'autoload': {
        \   'filetypes': 'ruby',
        \ },
        \}
  " NeoBundle 'supermomonga/neocomplete-rsense.vim', {
  "       \ 'depends': ['Shougo/neocomplete.vim', 'marcus/rsense'],
  "       \}
  
  NeoBundle "itchyny/lightline.vim"
  
  
  NeoBundle 'kana/vim-filetype-haskell' " indent
  NeoBundle 'eagletmt/ghcmod-vim' " display types of variables
  " ghcmod-vim needs ghc-mod which can be installed by "cabal install ghc-mod"
  let $PATH = $PATH . ':' . expand('~/.cabal/bin')
  NeoBundle 'ujihisa/neco-ghc' " completeai


" NeoBundle 'tpope/vim-markdown'
" NeoBundle 'tyru/open-browser.vim'
" NeoBundle 'kannokanno/previm'

" Color 
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'nanotech/jellybeans.vim'

  call neobundle#end()
endif

" NeoComplete ================================================
" Note: This option must set it in .vimrc(_vimrc).  
" NOT IN .gvimrc(_gvimrc)!

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  " return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Close popup by <Space>.
inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

"--------------------------------------------------------------------
" C/C++
"--------------------------------------------------------------------


" clang command setupj:w
let g:marching_clang_command="C:/Applications/MinGW/LLVM/bin/clang.exe"
let g:marching_backend = "sync_clang_command"
let g:marching_clang_command#options={
  \ "cpp": "-std=c++1y"
  \}
let g:marching_include_paths = [
\   "C:/Applications/MinGW/lib/gcc/mingw32/4.8.1/include/c++/"
\]

let g:marching_enable_neocomplete=1


if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp =
  \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

"--------------------------------------------------------------------
" Python
"--------------------------------------------------------------------
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd FileType python setlocal completeopt-=preview
let g:jedi#completions_enabled=0
let g:jedi#auto_vim_configuration=0

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns={}
endif
"let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
let g:neocomplete#force_omni_input_patterns.python = '\h\w|[^. \t].\w'
